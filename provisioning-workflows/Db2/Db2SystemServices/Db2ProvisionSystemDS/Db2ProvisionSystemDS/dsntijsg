//*********************************************************************
//* JOB NAME = DSNTIJSG
//*
//* DESCRIPTIVE NAME = INSTALLATION JOB STREAM
//*
//*    Licensed Materials - Property of IBM
//*    5650-DB2
//*    (C) COPYRIGHT 1982, 2016 IBM Corp.  All Rights Reserved.
//*
//*    STATUS = Version 12
//*
//* FUNCTION = CREATE USER MAINTAINED TABLES
//*
//* PSEUDOCODE =
//*   DSNTICU  STEP     CLEAN UP STEP TO PERMIT RERUNS
//*   DSNTIRU  STEP     BIND DCLGEN AND SPUFI
//*   DSNTIRL  STEP     CREATE RESOURCE LIMIT FACILITY OBJECTS
//*   DSNTIJD  STEP     INITIALIZE COMMUNICATIONS DATA BASE
//*   DSNTIJR  STEP     CREATE DDL REGISTRATION DATA BASE
//*   DSNTIJQ  STEP     CREATE THE QUERY OPTIMIZATION DATABASE
//*                       NOTE: TO DROP THE DATABASE AND ITS STORAGE
//*                             STORAGE GROUP FOR RECREATE, LOCATE
//*                             AND UNCOMMENT THE FOLLOWING LINE:
//*                               //*        DD  DDNAME=CLEANUP
//*   DSNTIJP  STEP     CREATE THE PROGRAM AUTHORIZATION DATABASE
//*                       NOTE: TO DROP THE DATABASE FOR RECREATE,
//*                             LOCATE AND UNCOMMENT THE FOLLOWING
//*                             LINE:
//*                               //*        DD  DDNAME=CLEANUP
//*                       NOTE: AT THE END OF THE JOB STEP IS A
//*                             COMMENTED-OUT INSERT STATEMENT
//*                             THAT IS AN EXAMPLE OF HOW TO
//*                             POPULATE THE SYSIBM.DSNPROGAUTH
//*                             TABLE.
//*   DSNTIJG  STEP     PERMIT ACCESS TO NEW OBJECTS, PLANS.
//*
//*
//* NOTES =
//*
//* Change activity =
//*   01/22/2015 Update DSNTIJQ and DSNTIJP for DB2 12           176020
//*   05/20/2015 Add BLOCK_FETCH to DSN_DETCOST_TABLE for DB2 12 s23543
//*   11/12/2015 Update for DB2 12 explain tables                181358
//*   10/02/2015 Installation w/o SYSADM            s24922_inst1 s24922
//*   12/08/2015 Fix typo                                 182061 182008
//*   09/21/2017 Remove DDLs for obsolete objects in step       PI86450
//*              DSNTIJQ
//*   08/21/2018 Tolerate creation of deprecated TSs    s81673 / t81374
//*
//*********************************************************************
//JOBLIB  DD  DISP=SHR,
//            DSN=${DSNLOAD}
//*
//*  //DSNTICU EXEC PGM=IKJEFT01,DYNAMNBR=20
//*  //SYSTSPRT DD  SYSOUT=*
//*  //SYSPRINT DD  SYSOUT=*
//*  //SYSUDUMP DD  SYSOUT=*
//*  //SYSTSIN  DD  *
//*    DSN SYSTEM(${MVSSNAME})
#if ( ${RLFSTART} == "YES" )
//*    -STOP RLIMIT
#end
#if ( ${DDSTART}=="AUTO" )
//*    -STOP DDF
#end
//*    RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) PARM('RC0') -
//*         LIBRARY('${RUNLIB}')
//*    END
//*  //SYSIN    DD  *
//*     SET CURRENT SQLID = '${INSSQLID}';
//*     DROP DATABASE DSNRGFDB;
//*     DROP DATABASE DSNRLST;
//*
//DSNTIRU EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  BIND PACKAGE(DSNTIAP) MEMBER(DSNTIAP) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PACKAGE(DSNESPCS) MEMBER(DSNESM68) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(CS) CURRENTDATA(YES) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PLAN(DSNESPCS) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       PKLIST(#pf(${DDSTART})DSNESPCS.DSNESM68, -
              #pf(${DDSTART})DSNTIAP.DSNTIAP) -
       ACTION(REPLACE) RETAIN +
       ISO(CS) CURRENTDATA(YES) ENCODING(EBCDIC)
  BIND PACKAGE(DSNESPRR) MEMBER(DSNESM68) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(RR) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PLAN(DSNESPRR) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       PKLIST(#pf(${DDSTART})DSNESPRR.DSNESM68, -
              #pf(${DDSTART})DSNTIAP.DSNTIAP) -
       ACTION(REPLACE) RETAIN +
       ISO(RR) ENCODING(EBCDIC)
  BIND PACKAGE(DSNESPUR) MEMBER(DSNESM68) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(UR) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PLAN(DSNESPUR) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       PKLIST(#pf(${DDSTART})DSNESPUR.DSNESM68, -
              #pf(${DDSTART})DSNTIAP.DSNTIAP) -
       ACTION(REPLACE) RETAIN +
       ISO(UR) ENCODING(EBCDIC)
  BIND PACKAGE(DSNEDCL) MEMBER(DSNECP68) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(CS) CURRENTDATA(YES) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PLAN(DSNEDCL) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       PKLIST(#pf(${DDSTART})DSNEDCL.DSNECP68, -
              #pf(${DDSTART})DSNTIAP.DSNTIAP) -
       ACTION(REPLACE) RETAIN +
       ISO(CS) CURRENTDATA(YES) ENCODING(EBCDIC)
  BIND PACKAGE(DSNUTIL) MEMBER(DSNUGSQL) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(CS) ENCODING(EBCDIC) -
       VALIDATE(BIND) CURRENTDATA(NO)  KEEPDYNAMIC(NO) -
       LIBRARY('${DSNDBRM}')
  BIND PACKAGE(DSNUT121) MEMBER(DSNUGSQL) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(CS) ENCODING(EBCDIC) -
       VALIDATE(BIND) CURRENTDATA(NO)  KEEPDYNAMIC(NO) -
       LIBRARY('${DSNDBRM}')
  BIND PACKAGE(DSNTXAZP) MEMBER(DSNTXAZP) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  BIND PLAN(DSNTXAZP) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       PKLIST(DSNTXAZP.DSNTXAZP) -
       ACTION(REPLACE) RETAIN +
       ENCODING(EBCDIC)
  BIND PACKAGE(DSNJAR) MEMBER(DSNX9LDJ) -
#if ( ${INSPKOWN} != "" )
       OWNER(${INSPKOWN}) +
#end
       ACTION(REPLACE) ISO(CS) CURRENTDATA(YES) ENCODING(EBCDIC) -
       LIBRARY('${DSNDBRM}')
  END
//*
//DSNTIRL EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
#if ( ${RLFSTART} == "YES" )
 -START RLIMIT ID(01)
#end
  END
//SYSIN    DD  *
   SET CURRENT SQLID = '${INSSQLID}';
   SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';
   CREATE DATABASE DSNRLST CCSID EBCDIC;
   CREATE TABLESPACE DSNRLS${RLFSUFF} IN DSNRLST CLOSE NO CCSID EBCDIC;
   CREATE TABLE SYSIBM.DSNRLST01
         (AUTHID         VARCHAR(128) NOT NULL WITH DEFAULT,
          PLANNAME       CHAR( 8)     NOT NULL WITH DEFAULT,
          ASUTIME        INTEGER,
          LUNAME         CHAR( 8)     NOT NULL WITH DEFAULT,
          RLFFUNC        CHAR( 1)     NOT NULL WITH DEFAULT,
          RLFBIND        CHAR( 1)     NOT NULL WITH DEFAULT,
          RLFCOLLN       VARCHAR(128) NOT NULL WITH DEFAULT,
          RLFPKG         VARCHAR(128) NOT NULL WITH DEFAULT,
          RLFASUERR      INTEGER,
          RLFASUWARN     INTEGER,
          RLF_CATEGORY_B CHAR( 1)     NOT NULL WITH DEFAULT)
      IN DSNRLST.DSNRLS${RLFSUFF} CCSID EBCDIC;
   CREATE UNIQUE INDEX SYSIBM.DSNARL01
      ON SYSIBM.DSNRLST01
         (RLFFUNC, AUTHID DESC, PLANNAME DESC,
          RLFCOLLN DESC, RLFPKG DESC, LUNAME DESC)
      CLUSTER CLOSE NO;
//         DD  *
//**********************************************************************
//* HERE ARE TWO SAMPLE INSERT STATEMENTS FOR INITIALIZING THE
//* RESOURCE LIMIT FACILITY'S RESOURCE LIMIT SPECIFICATION TABLE (RLST).
//* IF YOU WANT TO INITIALIZE THE RLST, BUILD YOUR OWN INSERTS
//* AND ADD THEM TO THE BOTTOM OF THE PREVIOUS STEP.
//*
//*    INSERT INTO SYSIBM.DSNRLST01
//*                (LUNAME,     AUTHID,     PLANNAME,   ASUTIME)
//*         VALUES ('        ', 'MYUSERID', 'MYPLAN',   10);
//*    INSERT INTO SYSIBM.DSNRLST01
//*                (LUNAME,     AUTHID,     PLANNAME,   ASUTIME)
//*         VALUES ('        ', '        ', 'DEPTPLAN', 30);
//**********************************************************************
//* USE THE FOLLOWING DDL TO CREATE AN OPTIONAL RLST AND INDEX FOR
//* RLF GOVERNING BASED ON END-USER ID, APPLICATION NAME, WORKSTATION
//* ID, AND IP ADDRESS.  SEE THE DB2 PERFORMANCE MONITORING AND TUNING
//* GUIDE FOR MORE INFORMATION ABOUT THIS TABLE.
//*
//*   CREATE TABLE SYSIBM.DSNRLMT${RLFSUFF}
//*         (RLFFUNC        CHAR(1)      NOT NULL WITH DEFAULT,
//*          RLFEUAN        VARCHAR(255) NOT NULL WITH DEFAULT,
//*          RLFEUID        VARCHAR(128) NOT NULL WITH DEFAULT,
//*          RLFEUWN        VARCHAR(255) NOT NULL WITH DEFAULT,
//*          RLFIP          CHAR(254)    NOT NULL WITH DEFAULT,
//*          ASUTIME        INTEGER,
//*          RLFASUERR      INTEGER,
//*          RLFASUWARN     INTEGER,
//*          RLF_CATEGORY_B CHAR(1)      NOT NULL WITH DEFAULT)
//*      IN DSNRLST.DSNRLS${RLFSUFF};
//*
//*   CREATE UNIQUE INDEX SYSIBM.DSNMRL${RLFSUFF}
//*      ON SYSIBM.DSNRLMT${RLFSUFF}
//*         (RLFFUNC, RLFEUAN DESC, RLFEUID DESC,
//*          RLFEUWN DESC, RLFIP DESC)
//*      CLUSTER CLOSE NO;
//**********************************************************************
//*
//DSNTIJD EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
#if ( ${DDSTART}=="AUTO" )
  -START DDF
#end
  END
//SYSIN    DD  *
   SET CURRENT SQLID = '${INSSQLID}';
   INSERT INTO SYSIBM.LUNAMES
             (LUNAME) VALUES (' ');

//*
//DSNTIJR EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
  END
//SYSIN    DD  *
   SET CURRENT SQLID = '${INSSQLID}';
   SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';

   CREATE DATABASE DSNRGFDB CCSID EBCDIC;

   CREATE TABLESPACE DSNRGFTS IN DSNRGFDB
          SEGSIZE 4
          CLOSE NO CCSID EBCDIC;

   CREATE TABLE DSNRGCOL.DSN_REGISTER_APPL
         (APPLIDENT          CHAR(18)     NOT NULL WITH DEFAULT,
          APPLIDENTTYPE      CHAR(1)      NOT NULL WITH DEFAULT,
          APPLICATIONDESC    VARCHAR(30)  NOT NULL WITH DEFAULT,
          DEFAULTAPPL        CHAR(1)      NOT NULL WITH DEFAULT,
          QUALIFIEROK        CHAR(1)      NOT NULL WITH DEFAULT,
          CREATOR            CHAR(26)     NOT NULL WITH DEFAULT,
          CREATETIMESTAMP    TIMESTAMP    NOT NULL WITH DEFAULT,
          CHANGER            CHAR(26)     NOT NULL WITH DEFAULT,
          CHANGETIMESTAMP    TIMESTAMP    NOT NULL WITH DEFAULT)
      IN DSNRGFDB.DSNRGFTS CCSID EBCDIC;

   CREATE UNIQUE INDEX DSNRGCOL.DSN_REGISTER_APPLI
      ON DSNRGCOL.DSN_REGISTER_APPL
         (APPLIDENT, APPLIDENTTYPE, DEFAULTAPPL DESC, QUALIFIEROK DESC)
      CLUSTER;

   CREATE TABLE DSNRGCOL.DSN_REGISTER_OBJT
         (QUALIFIER          CHAR(8)      NOT NULL WITH DEFAULT,
          NAME               CHAR(18)     NOT NULL WITH DEFAULT,
          TYPE               CHAR(1)      NOT NULL WITH DEFAULT,
          APPLMATCHREQ       CHAR(1)      NOT NULL WITH DEFAULT,
          APPLIDENT          CHAR(18)     NOT NULL WITH DEFAULT,
          APPLIDENTTYPE      CHAR(1)      NOT NULL WITH DEFAULT,
          APPLICATIONDESC    VARCHAR(30)  NOT NULL WITH DEFAULT,
          CREATOR            CHAR(26)     NOT NULL WITH DEFAULT,
          CREATETIMESTAMP    TIMESTAMP    NOT NULL WITH DEFAULT,
          CHANGER            CHAR(26)     NOT NULL WITH DEFAULT,
          CHANGETIMESTAMP    TIMESTAMP    NOT NULL WITH DEFAULT)
      IN DSNRGFDB.DSNRGFTS CCSID EBCDIC;

   CREATE UNIQUE INDEX DSNRGCOL.DSN_REGISTER_OBJTI
      ON DSNRGCOL.DSN_REGISTER_OBJT
         (QUALIFIER, NAME, TYPE )
      CLUSTER;

//*
//*********************************************************************
//* CREATE THE QUERY OPTIMIZATION DATABASE
//*   NOTE: TO DROP THE DATABASE AND ITS STORAGE GROUP FOR RECREATE,
//*         LOCATE AND UNCOMMENT THE FOLLOWING LINE:
//*           //*        DD  DDNAME=CLEANUP
//*********************************************************************
//DSNTIJQ EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
  END
//SYSIN    DD  *
//*        DD  DDNAME=CLEANUP     <- DROP THE QUERY OPT DATABASE
//         DD  DDNAME=CREATEDB    <- CREATE THE QUERY OPT DATABASE
//         DD  DDNAME=CREATENT    <- CREATE NEW-RELEASE TABLES
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* OPTIONAL: DROP THE QUERY OPTIMIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CLEANUP  DD  *
  SET CURRENT SQLID = '${INSSQLID}';
  DROP DATABASE DSNOPTDB;
  DROP STOGROUP DSNOPTSG;
  COMMIT;
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* CREATE THE QUERY OPTIMIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CREATEDB DD  *
  SET CURRENT SQLID = '${INSSQLID}';
  SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';
  CREATE STOGROUP DSNOPTSG
         VOLUMES ("*")
#if ( ${DATACLS3}=="" && ${MGMTCLS3}=="" &&
      ${STORCLS3}=="" )
         VCAT ${VCATALOG};
#else
         VCAT ${VCATALOG}
#end
#if ( ${DATACLS3}!="" && ${MGMTCLS3}=="" &&
      ${STORCLS3}=="" )
         DATACLAS ${DATACLS3};
#elseif ( ${DATACLS3}!="" )
         DATACLAS ${DATACLS3}
#end
#if (${MGMTCLS3}!="" && ${STORCLS3}=="")
         MGMTCLAS ${MGMTCLS3};
#elseif (${MGMTCLS3}!="")
         MGMTCLAS ${MGMTCLS3}
#end
#if (${STORCLS3}!= "")
         STORCLAS ${STORCLS3};
#end
  CREATE DATABASE DSNOPTDB
         STOGROUP DSNOPTSG
         CCSID UNICODE;
  CREATE TABLESPACE DSNOPTTS
         IN DSNOPTDB
         LOCKSIZE ROW
         LOCKMAX SYSTEM
         CLOSE NO
         CCSID UNICODE
         USING STOGROUP DSNOPTSG;
  CREATE TABLE SYSIBM.DSN_PROFILE_TABLE
         ( "AUTHID"                VARCHAR(128)
          ,"PLANNAME"              VARCHAR(24)
          ,"COLLID"                VARCHAR(128)
          ,"PKGNAME"               VARCHAR(128)
          ,"LOCATION"              VARCHAR(254)
          ,"PROFILEID"             INTEGER       NOT NULL
                                                 PRIMARY KEY
                                                 GENERATED BY DEFAULT
                                                 AS IDENTITY
          ,"PROFILE_TIMESTAMP"     TIMESTAMP     NOT NULL WITH DEFAULT
          ,"PROFILE_ENABLED"       CHAR(1)       NOT NULL DEFAULT 'Y'
          ,"GROUP_MEMBER"          VARCHAR(24)
          ,"REMARKS"               VARCHAR(762)
          ,"ROLE"                  VARCHAR(128)
          ,"PRDID"                 CHAR(8)
          ,"CLIENT_APPLNAME"       VARCHAR(255)
          ,"CLIENT_USERID"         VARCHAR(255)
          ,"CLIENT_WRKSTNNAME"     VARCHAR(255)
         )
         IN DSNOPTDB.DSNOPTTS
         CCSID UNICODE;
  CREATE UNIQUE INDEX SYSIBM.DSN_PROFILE_TABLE_IX_ALL
         ON SYSIBM.DSN_PROFILE_TABLE
         ( "PROFILEID"
         );
  CREATE INDEX SYSIBM.DSN_PROFILE_TABLE_IX2_ALL
         ON SYSIBM.DSN_PROFILE_TABLE
         ( "PROFILE_ENABLED"
          ,"AUTHID"
          ,"PLANNAME"
          ,"COLLID"
          ,"PKGNAME"
          ,"LOCATION"
          ,"PRDID"
          ,"ROLE"
          ,"CLIENT_APPLNAME"
          ,"CLIENT_USERID"
          ,"CLIENT_WRKSTNNAME"
          ,"GROUP_MEMBER"
          ,"PROFILE_TIMESTAMP" DESC
         );
  CREATE TABLE SYSIBM.DSN_PROFILE_HISTORY
         ( "AUTHID"                VARCHAR(128)
          ,"PLANNAME"              VARCHAR(24)
          ,"COLLID"                VARCHAR(128)
          ,"PKGNAME"               VARCHAR(128)
          ,"LOCATION"              VARCHAR(254)
          ,"PROFILEID"             INTEGER       NOT NULL
          ,"PROFILE_TIMESTAMP"     TIMESTAMP     NOT NULL
          ,"PROFILE_ENABLED"       CHAR(1)       NOT NULL
          ,"GROUP_MEMBER"          VARCHAR(24)
          ,"STATUS"                VARCHAR(254)
          ,"ROLE"                  VARCHAR(128)
          ,"PRDID"                 CHAR(8)
          ,"CLIENT_APPLNAME"       VARCHAR(255)
          ,"CLIENT_USERID"         VARCHAR(255)
          ,"CLIENT_WRKSTNNAME"     VARCHAR(255)
         )
         IN DSNOPTDB.DSNOPTTS
         CCSID UNICODE;
  CREATE TABLE SYSIBM.DSN_PROFILE_ATTRIBUTES
         ( "PROFILEID"             INTEGER       NOT NULL
            REFERENCES SYSIBM.DSN_PROFILE_TABLE
            ON DELETE CASCADE
          ,"KEYWORDS"              VARCHAR(128)  NOT NULL
          ,"ATTRIBUTE1"            VARCHAR(1024)
          ,"ATTRIBUTE2"            INTEGER
          ,"ATTRIBUTE3"            FLOAT
          ,"ATTRIBUTE_TIMESTAMP"   TIMESTAMP     NOT NULL WITH DEFAULT
          ,"REMARKS"               VARCHAR(762)
         )
         IN DSNOPTDB.DSNOPTTS
         CCSID UNICODE;
  CREATE UNIQUE INDEX SYSIBM.DSN_PROFILE_ATTRIBUTES_IX_ALL
         ON SYSIBM.DSN_PROFILE_ATTRIBUTES
         ( "PROFILEID"
          ,"ATTRIBUTE_TIMESTAMP"   DESC
          ,"KEYWORDS"
          ,"ATTRIBUTE1"
          ,"ATTRIBUTE2"
          ,"ATTRIBUTE3"
         )
         USING STOGROUP DSNOPTSG;
  CREATE TABLE SYSIBM.DSN_PROFILE_ATTRIBUTES_HISTORY
         ( "PROFILEID"             INTEGER       NOT NULL
          ,"KEYWORDS"              VARCHAR(128)  NOT NULL
          ,"ATTRIBUTE1"            VARCHAR(1024)
          ,"ATTRIBUTE2"            INTEGER
          ,"ATTRIBUTE3"            FLOAT
          ,"ATTRIBUTE_TIMESTAMP"   TIMESTAMP     NOT NULL
          ,"STATUS"                VARCHAR(254)
         )
         IN DSNOPTDB.DSNOPTTS
         CCSID UNICODE;

//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* CREATE NEW-RELEASE TABLES IN THE QUERY OPTIMIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CREATENT DD  *
  SET CURRENT SQLID = '${INSSQLID}';
//*
//*********************************************************************
//* CREATE THE PROGRAM AUTHORIZATION DATABASE
//*   NOTE: TO DROP THE DATABASE FOR RECREATE, LOCATE AND
//*         UNCOMMENT THE FOLLOWING LINE:
//*           //*        DD  DDNAME=CLEANUP
//*   NOTE: AT THE END OF THE JOB STEP IS A COMMENTED-OUT INSERT
//*         STATEMENT THAT IS AN EXAMPLE OF HOW TO POPULATE THE
//*         SYSIBM.DSNPROGAUTH TABLE.
//*********************************************************************
//DSNTIJP EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
  END
//SYSIN    DD  *
//*        DD  DDNAME=CLEANUP     <- DROP THE PROG AUTH DATABASE
//         DD  DDNAME=CREATEDB    <- CREATE THE PROG AUTH DATABASE
//         DD  DDNAME=CREATENT    <- CREATE NEW-RELEASE TABLES
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* OPTIONAL: DROP THE PROGRAM AUTHORIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CLEANUP  DD  *
  SET CURRENT SQLID = '${INSSQLID}';
  DROP DATABASE DSNMDCDB;
  COMMIT;
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* CREATE THE PROGRAM AUTHORIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CREATEDB DD  *
  SET CURRENT SQLID = '${INSSQLID}';
  CREATE DATABASE DSNMDCDB
         STOGROUP SYSDEFLT
         CCSID UNICODE;
  CREATE TABLESPACE DSNMDCTS
         IN DSNMDCDB
         BUFFERPOOL BP0
         LOCKSIZE ROW
         LOCKMAX SYSTEM
         CLOSE NO
         CCSID UNICODE
         USING STOGROUP SYSDEFLT;
  CREATE TABLE SYSIBM.DSNPROGAUTH
         ( "PROGNAME"              VARCHAR(24)   NOT NULL
         , "PLANNAME"              VARCHAR(24)   NOT NULL
         , "PROGMDCVAL"            CHAR(16)      FOR BIT DATA
                                                 NOT NULL
                                                 WITH DEFAULT
                                   X'00000000000000000000000000000000'
         , "PROGMDCPAD"            CHAR(1)       NOT NULL
                                                 WITH DEFAULT '2'
                                                 CHECK(PROGMDCPAD = '2'
                                                    OR PROGMDCPAD = '4')
         , "CREATOR"               VARCHAR(128)  NOT NULL
                                                 WITH DEFAULT
                                                 CURRENT SQLID
         , "ENABLED"               CHAR(1)       NOT NULL
                                                 WITH DEFAULT 'N'
                                                 CHECK(ENABLED = 'Y'
                                                    OR ENABLED = 'N')
         , "CREATETS"              TIMESTAMP     NOT NULL WITH DEFAULT
         , "REMARKS"               VARCHAR(762)
         )
         IN DSNMDCDB.DSNMDCTS
         CCSID UNICODE;
  CREATE UNIQUE INDEX SYSIBM.DSNPROGAUTH_IDX1
         ON SYSIBM.DSNPROGAUTH
         ( "PROGNAME"
         , "PLANNAME"
         )
         BUFFERPOOL BP0
         CLOSE NO
         USING STOGROUP SYSDEFLT;
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* CREATE NEW-RELEASE TABLES IN THE PROGRAM AUTHORIZATION DATABASE
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//CREATENT DD  *
  SET CURRENT SQLID = '${INSSQLID}';
//*
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//* Here is a sample insert statement for the DSNPROGAUTH table.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//*  INSERT INTO SYSIBM.DSNPROGAUTH
//*              ( "PROGNAME"
//*              , "PLANNAME"
//*              , "PROGMDCVAL"
//*              , "PROGMDCPAD"
//*              , "CREATOR"
//*              , "ENABLED"
//*              , "CREATETS"
//*              , "REMARKS"
//*              )
//*        VALUES( 'DSNTIAD'
//*              , 'DSNTIA12'
//*              , X'00000000000000000000000000000000'
//*              , '2'
//*              , CURRENT SQLID
//*              , 'N'
//*              , CURRENT TIMESTAMP
//*              , 'EXAMPLE DSNPROGAUTH ENTRY (DISABLED)'
//*              );
//*
//*
//*********************************************************************
//* GRANT ACCESS ON OBJECTS CREATED BY THIS JOB
//*********************************************************************
//DSNTIJG EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${MVSSNAME})
  RUN PROGRAM(DSNTIAD)  PLAN(DSNTIA12) -
       LIBRARY('${RUNLIB}')
  END
//SYSIN    DD  *
SET CURRENT SQLID = '${INSSQLID}';
GRANT EXECUTE ON PLAN DSNESPCS
      TO ${INSGRLST};
GRANT EXECUTE ON PLAN DSNESPRR
      TO ${INSGRLST};
GRANT EXECUTE ON PLAN DSNESPUR
      TO ${INSGRLST};
GRANT EXECUTE ON PLAN DSNEDCL
      TO ${INSGRLST};
GRANT EXECUTE ON PLAN DSNTXAZP
      TO ${INSGRLST};
GRANT EXECUTE ON PACKAGE DSNTXAZP.DSNTXAZP
      TO ${INSGRLST};
GRANT EXECUTE ON PACKAGE DSNUTIL.DSNUGSQL
      TO ${INSGRLST};
GRANT EXECUTE ON PACKAGE DSNUT121.DSNUGSQL
      TO ${INSGRLST};
GRANT EXECUTE ON PACKAGE DSNJAR.DSNX9LDJ
      TO ${INSGRLST};
## Macro to get the value to replace DSNT32
## $rlf is Authid of Resource Limit Table creator
## return $rlf. if $rlf is not blank
#macro (rq $rlf)
#if ($rlf != "")
$rlf.#else
#end#end
## Macro to get the prefix of the packages in PKLIST of DSNExxxx
## $ddstart is DDF startup option
## return *. if $ddstart is AUTO or COMMAND
## otherwise, return blank
#macro (pf $ddstart)
#if (($ddstart == "AUTO") || ($ddstart == "COMMAND"))
*.#else#end#end
## Macro to append suffix for data sets
## $suffix is the data set suffix
## return the suffix with the right period
#macro (libs $suffix)
#if ($suffix !=  "")
.$suffix#else#end#end
