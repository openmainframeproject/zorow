//*********************************************************************
//*  NAME = DSNTEJ1
//*
//*  DESCRIPTIVE NAME = DB2 SAMPLE APPLICATION
//*                     PHASE 1 (LOCAL SITE ONLY)
//*
//*    Licensed Materials - Property of IBM
//*    5650-DB2
//*    (C) COPYRIGHT 1982, 2016 IBM Corp.  All Rights Reserved.
//*
//*    STATUS = Version 12
//*
//*  FUNCTION = THIS JCL PERFORMS THE PHASE 1 SETUP FOR THE SAMPLE
//*             APPLICATIONS ON A LOCAL DB2 SYSTEM (A SYSTEM WHICH
//*             WILL CONTAIN THE ACTUAL SAMPLE TABLES).
//*
//*  NOTICE =
//*    THIS SAMPLE JOB USES DB2 UTILITIES. SOME UTILITY FUNCTIONS ARE
//*    ELEMENTS OF SEPARATELY ORDERABLE PRODUCTS.  SUCCESSFUL USE OF
//*    A PARTICULAR SAMPLE JOB MAY BE DEPENDENT UPON THE OPTIONAL
//*    PRODUCT BEING LICENSED AND INSTALLED IN YOUR ENVIRONMENT.
//*
#if(${DEFCCSID}==930 || ${DEFCCSID}==1390 || ${DEFCCSID}==5026)
//*    TO ENSURE CORRECT INTERPRETATION OF LOWER-CASE LATIN CHARACTERS
//*    IN XMLPATTERN TEXT, JOB STEP PH01S02 CREATES, USES, AND DROPS A
//*    SPECIAL PACKAGE AND PLAN CALLED DSNTIA37 TO FORCE DSNTIAD TO
//*    PROCESS SQL STATEMENTS USING CCSID 37.
//*
#end
//*  CHANGE ACTIVITY =
//*    10/20/2012 Create ALIASes instead of SYNONYMs     N0102 / 163503
//*    11/07/2012 ADD SET CURRENT SQLID           DN1651_INST1 / DN1651
//*    05/17/2013 FIX COPYRIGHT STATEMENT.                49779_077_724
//*    10/29/2013 Create EMP as PBR not index partitioned       PM98424
//*    02/24/2014 Increase length of the LRSN column in         PI10794
//*               MAP_TBL from CHAR(06) to CHAR(10)
//*    02/15/2016 Long data set names                           PI42601
//*    10/27/2016 Update MAP_TBL definition for DB2 12          PI66261
//*    08/21/2018 Tolerate creation of deprecated TSs   s81673 / t81374
//*
//*********************************************************************
//*
// JCLLIB ORDER=${PPROCLIB}
//*
//JOBLIB  DD  DSN=${DSNLOAD},DISP=SHR
//*
//*********************************************************************
//*       ASMCL PROC  - ASSEMBLE AND LINKEDIT AN ASM PROGRAM
//*
//ASMCL   PROC WSPC=500,MEM=TEMPNAME
//*
//*            ASSEMBLE
//*
//ASM     EXEC PGM=ASMA90,PARM='OBJECT,NODECK'
#if (${ASMLIB} != "")
//STEPLIB DD DSN=${ASMLIB},DISP=SHR
#end
//SYSIN    DD DISP=SHR,
//         DSN=${DSNSAMP}(&MEM)
//SYSLIB   DD DSN=${MACLIB},DISP=SHR
//         DD DSN=${DSNMACS},DISP=SHR
//         DD DSN=${DSNSAMP},DISP=SHR
//SYSLIN   DD DSN=&&LOADSET,DISP=(MOD,PASS),
//            #unit("${TVOLDEVT}",",")SPACE=(800,(&WSPC,&WSPC)),
//            DCB=(BLKSIZE=800)
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSUT1   DD #unit("${TVOLDEVT}",",")SPACE=(800,(&WSPC,&WSPC),,,ROUND)
//SYSUT2   DD #unit("${TVOLDEVT}",",")SPACE=(800,(&WSPC,&WSPC),,,ROUND)
//SYSUT3   DD #unit("${TVOLDEVT}",",")SPACE=(800,(&WSPC,&WSPC),,,ROUND)
//*
//*            LINKEDIT IF THE ASSEMBLER
//*            RETURN CODE IS 4 OR LESS
//*
//LKED    EXEC PGM=IEWL,PARM='LIST,XREF,NCAL,RENT,AMODE=31,RMODE=ANY',
//            COND=(4,LT,ASM)
//SYSLIN   DD DSN=&&LOADSET,DISP=(OLD,DELETE)
//SYSLMOD  DD DISP=SHR,
//         DSN=${DSNEXIT}(&MEM)
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSUT1   DD #unit("${TVOLDEVT}",",")SPACE=(1024,(50,50))
//*
//ASMCL   PEND
//*********************************************************************
//*
//*        STEP  0: REMOVE OBJECTS CREATED BY THIS JOB
//*
//PH01S00 EXEC PGM=IKJEFT01,DYNAMNBR=20
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) PARM('RC0') -
       LIB('${RUNLIB}')
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSIN    DD *
  SET CURRENT SQLID = '${IVPSQLID}';
  DROP DATABASE DSN8D12A;
  COMMIT;
  DROP DATABASE DSN8D12P;
  COMMIT;
  DROP DATABASE DSN8D12X;
  COMMIT;
  DROP SEQUENCE DSN81210.POID;
  COMMIT;
  DROP SEQUENCE DSN81210.CID;
  COMMIT;
  DROP STOGROUP DSN8G120;
  COMMIT;
//DELETE01 DD DSN=${INSICPRE}.SYSCOPY.DSN8D12A.DSN8S12D,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE02 DD DSN=${INSICPRE}.SYSCOPY.DSN8D12A.DSN8S12E,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE03 DD DSN=${INSICPRE}.DSN8D12A.DSN8S12E.PART3,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE04 DD DSN=${INSICPRE}.SYSCOPY.DSN8D12P.DSN8S12C,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE05 DD DSN=${INSICPRE}.SYSCOPY.DSN8D12A.DSN8S12P,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE06 DD DSN=${INSICPRE}.COPYDDN.DSN8D12P.DSN8S12C,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE07 DD DSN=${INSDSPRE}.DSN8.LISTDEF,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE08 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.SYSPUNCH,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE09 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.P00001,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE10 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.P00003,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE11 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.P00004,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE12 DD DSN=${INSICPRE}.DSN8D12A.DSN8S12E.REORGCPY,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE13 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.REORGDSC,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//DELETE14 DD DSN=${INSDSPRE}.DSN8D12A.DSN8S12E.REORGPUN,
//            DISP=(MOD,DELETE),
//            #unit("${TVOLDEVT}",",")SPACE=(TRK,0)
//*
//*        STEP  1: CREATE SAMPLE STORAGE GROUPS, TABLESPACES
//*
//PH01S01 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSIN    DD *
  SET CURRENT SQLID = '${IVPSQLID}';
  SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';

  CREATE STOGROUP DSN8G120
    VOLUMES ("*")
#if (${DATACLS3}=="" && ${MGMTCLS3}=="" && ${STORCLS3}=="")
         VCAT  ${VCATALOG};
#else
         VCAT  ${VCATALOG}
#end
#if (${DATACLS3}!="" && ${MGMTCLS3}=="" && ${STORCLS3}=="")
         DATACLAS ${DATACLS3};
#elseif (${DATACLS3}!="")
         DATACLAS ${DATACLS3}
#end
#if (${MGMTCLS3}!="" && ${STORCLS3}=="")
         MGMTCLAS ${MGMTCLS3};
#elseif (${MGMTCLS3}!="")
         MGMTCLAS ${MGMTCLS3}
#end
#if (${STORCLS3}!="")
         STORCLAS ${STORCLS3};
#end

  CREATE DATABASE DSN8D12A
    STOGROUP DSN8G120
    BUFFERPOOL BP0
    CCSID EBCDIC;

  CREATE DATABASE DSN8D12P
    STOGROUP DSN8G120
    BUFFERPOOL BP0
    CCSID EBCDIC;

  CREATE DATABASE DSN8D12X
    STOGROUP DSN8G120
    BUFFERPOOL BP0
    CCSID EBCDIC;

  CREATE TABLESPACE DSN8S12D
    IN DSN8D12A
    USING STOGROUP DSN8G120
    ERASE NO
    LOCKSIZE PAGE LOCKMAX SYSTEM
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  COMMIT ;

  CREATE TABLESPACE DSN8S12E
    IN DSN8D12A
    USING STOGROUP DSN8G120
    ERASE NO
    NUMPARTS 4
       (PART 1 USING STOGROUP DSN8G120
       ,PART 3 USING STOGROUP DSN8G120
       )
    SEGSIZE 0
    LOCKSIZE PAGE LOCKMAX SYSTEM
    BUFFERPOOL BP0
    CLOSE NO
    COMPRESS YES
    CCSID EBCDIC;

  COMMIT ;

  CREATE TABLESPACE DSN8S12C
    IN DSN8D12P
    USING STOGROUP DSN8G120
    SEGSIZE 4
    LOCKSIZE TABLE
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  COMMIT ;

  CREATE TABLESPACE DSN8S12Q
    IN DSN8D12P
    USING STOGROUP DSN8G120
    SEGSIZE 4
    LOCKSIZE PAGE
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  COMMIT ;

  CREATE TABLESPACE DSN8S12R
    IN DSN8D12A
    USING STOGROUP DSN8G120
    ERASE NO
    LOCKSIZE PAGE LOCKMAX SYSTEM
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  CREATE TABLESPACE DSN8S12P
    IN DSN8D12A
    USING STOGROUP DSN8G120
    SEGSIZE 4
    LOCKSIZE ROW
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  COMMIT ;

  CREATE TABLESPACE DSN8S12S
    IN DSN8D12A
    USING STOGROUP DSN8G120
    ERASE NO
    LOCKSIZE PAGE LOCKMAX SYSTEM
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  CREATE TABLESPACE DSN8S12X
    IN DSN8D12X
    USING STOGROUP DSN8G120
    ERASE NO
    LOCKSIZE PAGE LOCKMAX SYSTEM
    BUFFERPOOL BP0
    CLOSE NO
    CCSID EBCDIC;

  COMMIT;

//*
//*        STEP  2: CREATE SAMPLE TABLES, VIEWS
//*
//PH01S02 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
#if(${DEFCCSID}==930 || ${DEFCCSID}==1390 || ${DEFCCSID}==5026)
  BIND PACKAGE(DSNTIA37) MEM(DSNTIAD) -
#if (${IVPPKOWN}!="")
       OWNER(${IVPPKOWN}) QUALIFIER(DSN81210) +
#end
       ACT(REP) ISO(CS) CURRENTDATA(YES) ENCODING(37) -
       LIB('${DBRMLIB}')
  BIND PLAN(DSNTIA37) PKLIST(DSNTIA37.DSNTIAD) -
#if (${IVPPKOWN}!="")
       OWNER(${IVPPKOWN}) QUALIFIER(DSN81210) +
#end
       ACT(REP) ISO(CS) CURRENTDATA(YES) ENCODING(37)
#end
  RUN  PROGRAM(DSNTIAD) #getPlan(${DEFCCSID}) -
       LIB('${RUNLIB}')
#if(${DEFCCSID}==930 || ${DEFCCSID}==1390 || ${DEFCCSID}==5026)
  FREE PACKAGE(DSNTIA37.DSNTIAD.(*))
  FREE PLAN(DSNTIA37)
#end
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';
  SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';

  CREATE TABLE DSN81210.DEPT
                (DEPTNO   CHAR(3)        NOT NULL,
                 DEPTNAME VARCHAR(36)    NOT NULL,
                 MGRNO    CHAR(6)                ,
                 ADMRDEPT CHAR(3)        NOT NULL,
                 LOCATION CHAR(16)               ,
                 PRIMARY KEY(DEPTNO))
         IN DSN8D12A.DSN8S12D
         CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XDEPT1
                   ON DSN81210.DEPT
                       (DEPTNO   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE INDEX DSN81210.XDEPT2
                   ON DSN81210.DEPT
                       (MGRNO   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE INDEX DSN81210.XDEPT3
                   ON DSN81210.DEPT
                       (ADMRDEPT ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VDEPT
     AS SELECT ALL      DEPTNO  ,
                        DEPTNAME,
                        MGRNO   ,
                        ADMRDEPT
     FROM DSN81210.DEPT;

  CREATE VIEW DSN81210.VHDEPT
     AS SELECT ALL      DEPTNO  ,
                        DEPTNAME,
                        MGRNO   ,
                        ADMRDEPT,
                        LOCATION
     FROM DSN81210.DEPT;

  COMMIT ;

  CREATE TABLE DSN81210.EMP
                (EMPNO     CHAR(6)        NOT NULL,
                 FIRSTNME  VARCHAR(12)    NOT NULL,
                 MIDINIT   CHAR(1)        NOT NULL,
                 LASTNAME  VARCHAR(15)    NOT NULL,
                 WORKDEPT  CHAR(3)                ,
                 PHONENO   CHAR(4) CONSTRAINT NUMBER CHECK
                  (PHONENO >= '0000' AND PHONENO <= '9999'),
                 HIREDATE  DATE                   ,
                 JOB       CHAR(8)                ,
                 EDLEVEL   SMALLINT               ,
                 SEX       CHAR(1)                ,
                 BIRTHDATE DATE                   ,
                 SALARY    DECIMAL(9, 2)          ,
                 BONUS     DECIMAL(9, 2)          ,
                 COMM      DECIMAL(9, 2)          ,
                 PRIMARY KEY(EMPNO),
                 FOREIGN KEY RED (WORKDEPT) REFERENCES DSN81210.DEPT
                   ON DELETE SET NULL)
         PARTITION BY RANGE (EMPNO) (
  PARTITION 1 ENDING AT(#dlm(${DEFSQSTR})099999#dlm(${DEFSQSTR})),
  PARTITION 2 ENDING AT(#dlm(${DEFSQSTR})199999#dlm(${DEFSQSTR})),
  PARTITION 3 ENDING AT(#dlm(${DEFSQSTR})299999#dlm(${DEFSQSTR})),
  PARTITION 4 ENDING AT(#dlm(${DEFSQSTR})999999#dlm(${DEFSQSTR})))
         EDITPROC  DSN8EAE1
         IN DSN8D12A.DSN8S12E
         CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XEMP1
                   ON DSN81210.EMP
                       (EMPNO    ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE INDEX DSN81210.XEMP2
                   ON DSN81210.EMP
                       (WORKDEPT ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VEMP
     AS SELECT ALL      EMPNO   ,
                        FIRSTNME,
                        MIDINIT ,
                        LASTNAME,
                        WORKDEPT
     FROM DSN81210.EMP;

  COMMIT ;

  CREATE TABLE DSN81210.PROJ
                (PROJNO   CHAR(6) PRIMARY KEY NOT NULL,
                 PROJNAME VARCHAR(24)    NOT NULL WITH DEFAULT
                   'PROJECT NAME UNDEFINED',
                 DEPTNO   CHAR(3)        NOT NULL REFERENCES
                   DSN81210.DEPT ON DELETE RESTRICT,
                 RESPEMP  CHAR(6)        NOT NULL REFERENCES
                   DSN81210.EMP ON DELETE RESTRICT,
                 PRSTAFF  DECIMAL(5, 2)          ,
                 PRSTDATE DATE                   ,
                 PRENDATE DATE                   ,
                 MAJPROJ  CHAR(6))
         IN DSN8D12A.DSN8S12P
         CCSID EBCDIC;

  ALTER  TABLESPACE DSN8D12A.DSN8S12P   CLOSE NO;

  ALTER  TABLESPACE DSN8D12A.DSN8S12E
         PART 3 COMPRESS NO;

  CREATE UNIQUE INDEX DSN81210.XPROJ1
                   ON DSN81210.PROJ
                       (PROJNO   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE INDEX DSN81210.XPROJ2
                   ON DSN81210.PROJ
                       (RESPEMP  ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VPROJ
     AS SELECT ALL
               PROJNO, PROJNAME, DEPTNO, RESPEMP, PRSTAFF,
               PRSTDATE, PRENDATE, MAJPROJ
     FROM DSN81210.PROJ ;

  COMMIT ;

  CREATE TABLE DSN81210.ACT
                (ACTNO    SMALLINT       NOT NULL,
                 ACTKWD   CHAR(6)        NOT NULL,
                 ACTDESC  VARCHAR(20)    NOT NULL,
                 PRIMARY KEY(ACTNO))
         IN DSN8D12A.DSN8S12P
         CCSID EBCDIC;

  ALTER  TABLESPACE DSN8D12A.DSN8S12P   CLOSE NO;

  CREATE UNIQUE INDEX DSN81210.XACT1
                   ON DSN81210.ACT
                       (ACTNO    ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE UNIQUE INDEX DSN81210.XACT2
                   ON DSN81210.ACT
                       (ACTKWD   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VACT
        AS SELECT ALL      ACTNO   ,
                        ACTKWD  ,
                        ACTDESC
             FROM DSN81210.ACT ;

  COMMIT ;

  CREATE TABLE DSN81210.PROJACT
                (PROJNO   CHAR(6)        NOT NULL,
                 ACTNO    SMALLINT       NOT NULL,
                 ACSTAFF  DECIMAL(5, 2)          ,
                 ACSTDATE DATE           NOT NULL,
                 ACENDATE DATE                   ,
                 PRIMARY KEY(PROJNO,ACTNO,ACSTDATE),
                 FOREIGN KEY RPAP (PROJNO) REFERENCES DSN81210.PROJ
                   ON DELETE RESTRICT,
                 FOREIGN KEY RPAA (ACTNO) REFERENCES DSN81210.ACT
                   ON DELETE RESTRICT)
         IN DSN8D12A.DSN8S12P
         CCSID EBCDIC;

  ALTER  TABLESPACE DSN8D12A.DSN8S12P   CLOSE NO;

  CREATE UNIQUE INDEX DSN81210.XPROJAC1
                   ON DSN81210.PROJACT
                       (PROJNO   ASC,
                        ACTNO    ASC,
                        ACSTDATE ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VPROJACT
        AS SELECT ALL
              PROJNO,ACTNO, ACSTAFF, ACSTDATE, ACENDATE
              FROM DSN81210.PROJACT ;

  COMMIT ;

  CREATE TABLE DSN81210.EMPPROJACT
                (EMPNO    CHAR(6)        NOT NULL,
                 PROJNO   CHAR(6)        NOT NULL,
                 ACTNO    SMALLINT       NOT NULL,
                 EMPTIME  DECIMAL(5, 2)          ,
                 EMSTDATE DATE                   ,
                 EMENDATE DATE                   ,
                 FOREIGN KEY REPAPA (PROJNO, ACTNO, EMSTDATE)
                   REFERENCES DSN81210.PROJACT
                   ON DELETE RESTRICT,
                 FOREIGN KEY REPAE (EMPNO) REFERENCES DSN81210.EMP
                   ON DELETE RESTRICT)
         IN DSN8D12A.DSN8S12P
         CCSID EBCDIC;

  ALTER  TABLESPACE DSN8D12A.DSN8S12P   CLOSE NO;

  CREATE UNIQUE INDEX DSN81210.XEMPPROJACT1
                   ON DSN81210.EMPPROJACT
                       (PROJNO   ASC,
                        ACTNO    ASC,
                        EMSTDATE ASC,
                        EMPNO    ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE INDEX DSN81210.XEMPPROJACT2
                   ON DSN81210.EMPPROJACT
                       (EMPNO    ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VEMPPROJACT
        AS SELECT ALL
            EMPNO, PROJNO, ACTNO, EMPTIME, EMSTDATE, EMENDATE
            FROM DSN81210.EMPPROJACT ;

  COMMIT ;

  CREATE TABLE DSN81210.PARTS
                (ITEMNUM   CHAR(6)        NOT NULL,
                 DESCRIPT  VARCHAR(30)    NOT NULL,
                 COLOR     VARCHAR(8)             ,
                 SUPPLIER  VARCHAR(15)    NOT NULL)
         IN DSN8D12A.DSN8S12S
         CCSID EBCDIC;

  CREATE INDEX DSN81210.XPARTS
                   ON DSN81210.PARTS
                       (ITEMNUM  ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  COMMIT ;

  CREATE TABLE DSN81210.TCONA
                (CONVID   CHAR(16)       NOT NULL,
                 LASTSCR  CHAR(8)        NOT NULL,
                 LASTPOS  CHAR(254)      NOT NULL,
                 LASTPOSC CHAR(254)      NOT NULL,
                 LASTMSG  VARCHAR(1609)  NOT NULL)
         IN DSN8D12P.DSN8S12C
         CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XCONA1
                   ON DSN81210.TCONA
                       (CONVID   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VCONA
     AS SELECT ALL
                 CONVID, LASTSCR, LASTPOS, LASTPOSC, LASTMSG
     FROM DSN81210.TCONA ;

  COMMIT ;

  CREATE TABLE DSN81210.TOPTVAL
                (MAJSYS   CHAR(1)        NOT NULL,
                 ACTION   CHAR(1)        NOT NULL,
                 OBJFLD   CHAR(2)        NOT NULL,
                 SRCHCRIT CHAR(2)        NOT NULL,
                 SCRTYPE  CHAR(1)        NOT NULL,
                 HEADTXT  CHAR(50)       NOT NULL,
                 SELTXT   CHAR(50)       NOT NULL,
                 INFOTXT  CHAR(79)       NOT NULL,
                 HELPTXT  CHAR(79)       NOT NULL,
                 PFKTXT   CHAR(79)       NOT NULL,
                 DSPINDEX CHAR(2)        NOT NULL)
         IN DSN8D12P.DSN8S12C
         CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XOPTVAL1
                   ON DSN81210.TOPTVAL
                       (MAJSYS   ASC,
                        ACTION   ASC,
                        OBJFLD   ASC,
                        SRCHCRIT ASC,
                        SCRTYPE  ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VOPTVAL
     AS SELECT ALL
          MAJSYS, ACTION, OBJFLD, SRCHCRIT, SCRTYPE, HEADTXT,
          SELTXT, INFOTXT, HELPTXT, PFKTXT, DSPINDEX
     FROM DSN81210.TOPTVAL ;

  COMMIT ;

  CREATE TABLE DSN81210.TDSPTXT
                (DSPINDEX CHAR(2)        NOT NULL,
                 LINENO   CHAR(2)        NOT NULL,
                 DSPLINE  CHAR(79)       NOT NULL)
         IN DSN8D12P.DSN8S12C
         CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XDSPTXT1
                   ON DSN81210.TDSPTXT
                       (DSPINDEX ASC,
                        LINENO   ASC)
                   USING STOGROUP DSN8G120
                   ERASE NO
                   BUFFERPOOL BP0
                   CLOSE NO;

  CREATE VIEW DSN81210.VDSPTXT
     AS SELECT ALL
                 DSPINDEX, LINENO, DSPLINE
     FROM DSN81210.TDSPTXT ;

  COMMIT;

  ALTER TABLE DSN81210.DEPT
     FOREIGN KEY RDD (ADMRDEPT) REFERENCES DSN81210.DEPT
       ON DELETE CASCADE;
  ALTER TABLE DSN81210.DEPT
     FOREIGN KEY RDE (MGRNO) REFERENCES DSN81210.EMP
       ON DELETE SET NULL;
  ALTER TABLE DSN81210.PROJ
     FOREIGN KEY RPP (MAJPROJ) REFERENCES DSN81210.PROJ
       ON DELETE CASCADE;

  COMMIT;

  CREATE TABLE DSN81210.EDEPT    LIKE DSN81210.DEPT
         IN DSN8D12A.DSN8S12R ;
  CREATE TABLE DSN81210.EEMP     LIKE DSN81210.EMP
         IN DSN8D12A.DSN8S12R ;
  CREATE TABLE DSN81210.EPROJ    LIKE DSN81210.PROJ
         IN DSN8D12A.DSN8S12R ;
  CREATE TABLE DSN81210.EACT     LIKE DSN81210.ACT
         IN DSN8D12A.DSN8S12R ;
  CREATE TABLE DSN81210.EPROJACT LIKE DSN81210.PROJACT
         IN DSN8D12A.DSN8S12R ;
  CREATE TABLE DSN81210.EEPA     LIKE DSN81210.EMPPROJACT
         IN DSN8D12A.DSN8S12R ;

  COMMIT;

  ALTER TABLE DSN81210.EDEPT
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EDEPT
        ADD TSTAMP   TIMESTAMP;
  ALTER TABLE DSN81210.EEMP
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EEMP
        ADD TSTAMP   TIMESTAMP;
  ALTER TABLE DSN81210.EPROJ
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EPROJ
        ADD TSTAMP   TIMESTAMP;
  ALTER TABLE DSN81210.EACT
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EACT
        ADD TSTAMP   TIMESTAMP;
  ALTER TABLE DSN81210.EPROJACT
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EPROJACT
        ADD TSTAMP   TIMESTAMP;
  ALTER TABLE DSN81210.EEPA
        ADD RID      CHAR(4);
  ALTER TABLE DSN81210.EEPA
        ADD TSTAMP   TIMESTAMP;

  COMMIT;

  CREATE SEQUENCE DSN81210.POID
    AS BIGINT
    START WITH 1000
    INCREMENT BY 1;

  CREATE SEQUENCE DSN81210.CID
    AS BIGINT
    START WITH 1000
    INCREMENT BY 1;

  CREATE TABLE DSN81210.PRODUCT
    ( PID              VARCHAR(10)   NOT NULL PRIMARY KEY
     ,NAME             VARCHAR(128)
     ,PRICE            DECIMAL(30, 2)
     ,PROMOPRICE       DECIMAL(30, 2)
     ,PROMOSTART       DATE
     ,PROMOEND         DATE
     ,DESCRIPTION      XML )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.PROD_NAME_PIDX
    ON DSN81210.PRODUCT(PID)
    USING STOGROUP DSN8G120;

  CREATE INDEX DSN81210.PROD_NAME_XMLIDX
    ON DSN81210.PRODUCT(DESCRIPTION)
    GENERATE KEY USING XMLPATTERN '/product/description/name'
      AS SQL VARCHAR(128)
    USING STOGROUP DSN8G120;

  CREATE INDEX DSN81210.PROD_DETAIL_XMLIDX
    ON DSN81210.PRODUCT(DESCRIPTION)
    GENERATE KEY USING XMLPATTERN '/product/description/detail'
      AS SQL VARCHAR(128)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.INVENTORY
    ( PID              VARCHAR(10)  NOT NULL PRIMARY KEY,
      QUANTITY         INTEGER,
      LOCATION         VARCHAR(128) )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.INVENTORY_PIDX
    ON DSN81210.INVENTORY(PID)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.CUSTOMER
    ( CID              BIGINT       NOT NULL PRIMARY KEY,
      INFO             XML,
      HISTORY          XML )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.CUSTOMER_CIDX
    ON DSN81210.CUSTOMER(CID)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.PURCHASEORDER
    ( POID             BIGINT       NOT NULL PRIMARY KEY,
      STATUS           VARCHAR(10)  NOT NULL WITH DEFAULT 'New',
      PORDER           XML )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.PURCHASEORDER_POIDX
    ON DSN81210.PURCHASEORDER(POID)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.CATALOG
    ( NAME             VARCHAR(128) NOT NULL PRIMARY KEY,
      CATLOG           XML )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.CATALOG_NAMEX
    ON DSN81210.CATALOG(NAME)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.SUPPLIERS
    ( SID              VARCHAR(10) NOT NULL PRIMARY KEY,
      ADDR             XML )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.SUPPLIERS_SIDX
    ON DSN81210.SUPPLIERS(SID)
    USING STOGROUP DSN8G120;

  CREATE TABLE DSN81210.PRODUCTSUPPLIER
    ( PID              VARCHAR(10) NOT NULL,
      SID              VARCHAR(10) NOT NULL,
      PRIMARY KEY(PID,SID) )
    IN DSN8D12X.DSN8S12X
    CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.PRODUCTSUPPLIER_PID_SIDX
    ON DSN81210.PRODUCTSUPPLIER(PID,SID)
    USING STOGROUP DSN8G120;

//*
//*        STEP  3: CREATE SAMPLE MAPPING TABLE FOR ONLINE REORG
//*
//*********************************************************************
//*   THE FOLLOWING IS AN EXAMPLE DEFINITION OF THE MAPPING TABLE     *
//*   THAT IS REQUIRED TO RUN AN ONLINE REORGANIZATION WITH SHRLEVEL  *
//*   CHANGE.                                                         *
//*                                                                   *
//*   A MAPPING TABLE MUST BE CREATED IN A SEGMENTED TABLE SPACE.     *
//*   THAT TABLESPACE SHOULD CONTAIN ONLY MAPPING TABLES.  IT MUST    *
//*   NOT BE THE TABLE SPACE THAT IS TO BE REORGANIZED.               *
//*                                                                   *
//*   IF YOU WANT CONCURRENT EXECUTIONS OF REORG (ON SEVERAL TABLE    *
//*   SPACES AND/OR ON SEVERAL PARTITIONS OF A TABLE SPACE) THE       *
//*   EXECUTIONS SHOULD USE DIFFERENT MAPPING TABLES.                 *
//*********************************************************************
//PH01S03 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD SYSOUT=*
//SYSUDUMP DD SYSOUT=*
//SYSIN    DD *
  SET CURRENT SQLID = '${IVPSQLID}';
  SET CURRENT APPLICATION COMPATIBILITY = 'V11R1';

  CREATE TABLE DSN81210.MAP_TBL
        (TYPE         CHAR( 01 ) NOT NULL,
         SOURCE_RID   CHAR( 07 ) NOT NULL,
         TARGET_XRID  CHAR( 11 ) NOT NULL,
         LRSN         CHAR( 10 ) NOT NULL)
     IN DSN8D12P.DSN8S12Q
     CCSID EBCDIC;

  CREATE UNIQUE INDEX DSN81210.XMAP_TBL
     ON DSN81210.MAP_TBL
        (SOURCE_RID ASC,
         TYPE,
         TARGET_XRID,
         LRSN)
     USING STOGROUP DSN8G120
     ERASE NO
     BUFFERPOOL BP0
     CLOSE NO;
//*
//*        STEP  4: CREATE SAMPLE VIEWS
//*
//PH01S04 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';

  CREATE VIEW DSN81210.VDEPMG1
        (DEPTNO, DEPTNAME, MGRNO, FIRSTNME, MIDINIT, LASTNAME, ADMRDEPT)
      AS SELECT ALL
         DEPTNO, DEPTNAME, EMPNO, FIRSTNME, MIDINIT, LASTNAME, ADMRDEPT
          FROM DSN81210.DEPT LEFT OUTER JOIN DSN81210.EMP
          ON MGRNO = EMPNO ;

  CREATE VIEW DSN81210.VEMPDPT1
        (DEPTNO, DEPTNAME, EMPNO, FRSTINIT, MIDINIT,
         LASTNAME, WORKDEPT)
      AS SELECT ALL
         DEPTNO, DEPTNAME, EMPNO, SUBSTR(FIRSTNME, 1, 1), MIDINIT,
         LASTNAME, WORKDEPT
          FROM DSN81210.DEPT RIGHT OUTER JOIN DSN81210.EMP
          ON WORKDEPT = DEPTNO ;

  CREATE VIEW DSN81210.VASTRDE1
      (DEPT1NO,DEPT1NAM,EMP1NO,EMP1FN,EMP1MI,EMP1LN,TYPE2,
       DEPT2NO,DEPT2NAM,EMP2NO,EMP2FN,EMP2MI,EMP2LN)
      AS SELECT ALL
          D1.DEPTNO,D1.DEPTNAME,D1.MGRNO,D1.FIRSTNME,D1.MIDINIT,
          D1.LASTNAME, #dlm(${DEFSQSTR})1#dlm(${DEFSQSTR}),
          D2.DEPTNO,D2.DEPTNAME,D2.MGRNO,D2.FIRSTNME,D2.MIDINIT,
          D2.LASTNAME
          FROM DSN81210.VDEPMG1 D1, DSN81210.VDEPMG1 D2
          WHERE D1.DEPTNO = D2.ADMRDEPT ;

  CREATE VIEW DSN81210.VASTRDE2
      (DEPT1NO,DEPT1NAM,EMP1NO,EMP1FN,EMP1MI,EMP1LN,TYPE2,
       DEPT2NO,DEPT2NAM,EMP2NO,EMP2FN,EMP2MI,EMP2LN)
      AS SELECT ALL
           D1.DEPTNO,D1.DEPTNAME,D1.MGRNO,D1.FIRSTNME,D1.MIDINIT,
           D1.LASTNAME,#dlm(${DEFSQSTR})2#dlm(${DEFSQSTR}),
           D1.DEPTNO,D1.DEPTNAME,E2.EMPNO,E2.FIRSTNME,E2.MIDINIT,
           E2.LASTNAME
           FROM DSN81210.VDEPMG1 D1, DSN81210.EMP E2
           WHERE D1.DEPTNO = E2.WORKDEPT;

  CREATE VIEW DSN81210.VPROJRE1
    (PROJNO,PROJNAME,PROJDEP,RESPEMP,FIRSTNME,MIDINIT,LASTNAME,MAJPROJ)
     AS SELECT ALL
        PROJNO,PROJNAME,DEPTNO,EMPNO,FIRSTNME,MIDINIT,LASTNAME,MAJPROJ
       FROM DSN81210.PROJ, DSN81210.EMP
       WHERE RESPEMP = EMPNO ;

  CREATE VIEW DSN81210.VPSTRDE1
    (PROJ1NO,PROJ1NAME,RESP1NO,RESP1FN,RESP1MI,RESP1LN,
     PROJ2NO,PROJ2NAME,RESP2NO,RESP2FN,RESP2MI,RESP2LN)
     AS SELECT ALL
          P1.PROJNO,P1.PROJNAME,P1.RESPEMP,P1.FIRSTNME,P1.MIDINIT,
          P1.LASTNAME,
          P2.PROJNO,P2.PROJNAME,P2.RESPEMP,P2.FIRSTNME,P2.MIDINIT,
          P2.LASTNAME
       FROM DSN81210.VPROJRE1 P1,
         DSN81210.VPROJRE1 P2
       WHERE P1.PROJNO = P2.MAJPROJ ;

  CREATE VIEW DSN81210.VPSTRDE2
    (PROJ1NO,PROJ1NAME,RESP1NO,RESP1FN,RESP1MI,RESP1LN,
     PROJ2NO,PROJ2NAME,RESP2NO,RESP2FN,RESP2MI,RESP2LN)
     AS SELECT ALL
          P1.PROJNO,P1.PROJNAME,P1.RESPEMP,P1.FIRSTNME,P1.MIDINIT,
          P1.LASTNAME,
          P1.PROJNO,P1.PROJNAME,P1.RESPEMP,P1.FIRSTNME,P1.MIDINIT,
          P1.LASTNAME
       FROM DSN81210.VPROJRE1 P1
         WHERE NOT EXISTS
           (SELECT * FROM DSN81210.VPROJRE1 P2
             WHERE P1.PROJNO = P2.MAJPROJ) ;

  CREATE VIEW DSN81210.VFORPLA
    (PROJNO,PROJNAME,RESPEMP,PROJDEP,FRSTINIT,MIDINIT,LASTNAME)
     AS SELECT ALL
        F1.PROJNO,PROJNAME,RESPEMP,PROJDEP, SUBSTR(FIRSTNME, 1, 1),
        MIDINIT, LASTNAME
       FROM DSN81210.VPROJRE1 F1 LEFT OUTER JOIN DSN81210.EMPPROJACT F2
       ON F1.PROJNO = F2.PROJNO;

  CREATE VIEW DSN81210.VSTAFAC1
    (PROJNO, ACTNO, ACTDESC, EMPNO, FIRSTNME, MIDINIT, LASTNAME,
     EMPTIME,STDATE,ENDATE, TYPE)
     AS SELECT ALL
           PA.PROJNO, PA.ACTNO, AC.ACTDESC,
           #dlm(${DEFSQSTR}) #dlm(${DEFSQSTR}),
           #dlm(${DEFSQSTR}) #dlm(${DEFSQSTR}),
           #dlm(${DEFSQSTR}) #dlm(${DEFSQSTR}),
           #dlm(${DEFSQSTR}) #dlm(${DEFSQSTR}),
           PA.ACSTAFF, PA.ACSTDATE,
           PA.ACENDATE,#dlm($DEFSQSTR)${B}1#dlm($DEFSQSTR)${B}
       FROM DSN81210.PROJACT PA, DSN81210.ACT AC
       WHERE PA.ACTNO = AC.ACTNO ;

  CREATE VIEW DSN81210.VSTAFAC2
    (PROJNO, ACTNO, ACTDESC, EMPNO, FIRSTNME, MIDINIT, LASTNAME,
     EMPTIME,STDATE, ENDATE, TYPE)
     AS SELECT ALL
           EP.PROJNO, EP.ACTNO, AC.ACTDESC, EP.EMPNO,EM.FIRSTNME,
           EM.MIDINIT, EM.LASTNAME, EP.EMPTIME, EP.EMSTDATE,
           EP.EMENDATE,#dlm($DEFSQSTR)${B}2#dlm($DEFSQSTR)${B}
       FROM DSN81210.EMPPROJACT EP, DSN81210.ACT AC, DSN81210.EMP EM
       WHERE EP.ACTNO = AC.ACTNO  AND EP.EMPNO = EM.EMPNO ;

  CREATE VIEW DSN81210.VPHONE
                (LASTNAME,
                 FIRSTNAME,
                 MIDDLEINITIAL,
                 PHONENUMBER,
                 EMPLOYEENUMBER,
                 DEPTNUMBER,
                 DEPTNAME)
     AS SELECT ALL      LASTNAME,
                        FIRSTNME,
                        MIDINIT ,
                        VALUE(PHONENO,#dlm($DEFSQSTR)    #dlm($DEFSQSTR)),
                        EMPNO,
                        DEPTNO,
                        DEPTNAME
     FROM DSN81210.EMP, DSN81210.DEPT
     WHERE WORKDEPT = DEPTNO;

  CREATE VIEW DSN81210.VEMPLP
                (EMPLOYEENUMBER,
                 PHONENUMBER)
     AS SELECT ALL      EMPNO   ,
                        PHONENO
     FROM DSN81210.EMP ;
//*
//*        STEP  5: DROP ALIASES
//*
//PH01S05 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) PARM('RC0') -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';
  DROP   ALIAS ACT         ;
  DROP   ALIAS TCONA       ;
  DROP   ALIAS DEPT        ;
  DROP   ALIAS TDSPTXT     ;
  DROP   ALIAS EMP         ;
  DROP   ALIAS EMPPROJACT  ;
  DROP   ALIAS TOPTVAL     ;
  DROP   ALIAS PROJACT     ;
  DROP   ALIAS PROJ        ;
  DROP   ALIAS VPHONE      ;
  DROP   ALIAS VACT        ;
  DROP   ALIAS VCONA       ;
  DROP   ALIAS VDEPT       ;
  DROP   ALIAS VHDEPT      ;
  DROP   ALIAS VDSPTXT     ;
  DROP   ALIAS VEMP        ;
  DROP   ALIAS VEMPPROJACT ;
  DROP   ALIAS VOPTVAL     ;
  DROP   ALIAS VPROJACT    ;
  DROP   ALIAS VPROJ       ;
  DROP   ALIAS VEMPLP      ;
  DROP   ALIAS VDEPMG1     ;
  DROP   ALIAS VEMPDPT1    ;
  DROP   ALIAS VASTRDE1    ;
  DROP   ALIAS VASTRDE2    ;
  DROP   ALIAS VPROJRE1    ;
  DROP   ALIAS VPSTRDE1    ;
  DROP   ALIAS VPSTRDE2    ;
  DROP   ALIAS VFORPLA     ;
  DROP   ALIAS VSTAFAC1    ;
  DROP   ALIAS VSTAFAC2    ;
  DROP   ALIAS PRODUCT     ;
  DROP   ALIAS INVENTORY   ;
  DROP   ALIAS CUSTOMER    ;
  DROP   ALIAS PURCHASEORDER;
  DROP   ALIAS CATALOG     ;
  DROP   ALIAS SUPPLIERS   ;
  DROP   ALIAS PRODUCTSUPPLIER;
//*
//*        STEP  6: GRANT AUTHORITY, CREATE ALIASES
//*
//PH01S06 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';
  CREATE ALIAS ACT           FOR DSN81210.ACT ;
  CREATE ALIAS TCONA         FOR DSN81210.TCONA ;
  CREATE ALIAS DEPT          FOR DSN81210.DEPT ;
  CREATE ALIAS TDSPTXT       FOR DSN81210.TDSPTXT ;
  CREATE ALIAS EMP           FOR DSN81210.EMP ;
  CREATE ALIAS EMPPROJACT    FOR DSN81210.EMPPROJACT ;
  CREATE ALIAS TOPTVAL       FOR DSN81210.TOPTVAL ;
  CREATE ALIAS PROJACT       FOR DSN81210.PROJACT ;
  CREATE ALIAS PROJ          FOR DSN81210.PROJ ;
  CREATE ALIAS VPHONE        FOR DSN81210.VPHONE ;
  CREATE ALIAS VACT          FOR DSN81210.VACT ;
  CREATE ALIAS VCONA         FOR DSN81210.VCONA ;
  CREATE ALIAS VDEPT         FOR DSN81210.VDEPT ;
  CREATE ALIAS VHDEPT        FOR DSN81210.VHDEPT ;
  CREATE ALIAS VDSPTXT       FOR DSN81210.VDSPTXT ;
  CREATE ALIAS VEMP          FOR DSN81210.VEMP ;
  CREATE ALIAS VEMPPROJACT   FOR DSN81210.VEMPPROJACT ;
  CREATE ALIAS VOPTVAL       FOR DSN81210.VOPTVAL ;
  CREATE ALIAS VPROJACT      FOR DSN81210.VPROJACT ;
  CREATE ALIAS VPROJ         FOR DSN81210.VPROJ ;
  CREATE ALIAS VEMPLP        FOR DSN81210.VEMPLP ;
  CREATE ALIAS VDEPMG1       FOR DSN81210.VDEPMG1 ;
  CREATE ALIAS VEMPDPT1      FOR DSN81210.VEMPDPT1 ;
  CREATE ALIAS VASTRDE1      FOR DSN81210.VASTRDE1;
  CREATE ALIAS VASTRDE2      FOR DSN81210.VASTRDE2;
  CREATE ALIAS VPROJRE1      FOR DSN81210.VPROJRE1;
  CREATE ALIAS VPSTRDE1      FOR DSN81210.VPSTRDE1;
  CREATE ALIAS VPSTRDE2      FOR DSN81210.VPSTRDE2;
  CREATE ALIAS VFORPLA       FOR DSN81210.VFORPLA;
  CREATE ALIAS VSTAFAC1      FOR DSN81210.VSTAFAC1;
  CREATE ALIAS VSTAFAC2      FOR DSN81210.VSTAFAC2;
  CREATE ALIAS PRODUCT       FOR DSN81210.PRODUCT;
  CREATE ALIAS INVENTORY     FOR DSN81210.INVENTORY;
  CREATE ALIAS CUSTOMER      FOR DSN81210.CUSTOMER;
  CREATE ALIAS PURCHASEORDER FOR DSN81210.PURCHASEORDER;
  CREATE ALIAS CATALOG       FOR DSN81210.CATALOG;
  CREATE ALIAS SUPPLIERS     FOR DSN81210.SUPPLIERS;
  CREATE ALIAS PRODUCTSUPPLIER FOR DSN81210.PRODUCTSUPPLIER;

  GRANT USE OF STOGROUP DSN8G120
        TO ${IVPGRLST};
  GRANT DBADM ON DATABASE DSN8D12A
        TO ${IVPGRLST};
  GRANT DBADM ON DATABASE DSN8D12P
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12A.DSN8S12D
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12A.DSN8S12E
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12A.DSN8S12P
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12A.DSN8S12S
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12P.DSN8S12C
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12P.DSN8S12Q
        TO ${IVPGRLST};
  GRANT USE OF TABLESPACE DSN8D12X.DSN8S12X
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.ACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.TCONA
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.DEPT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.TDSPTXT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.EMP
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.EMPPROJACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.TOPTVAL
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PARTS
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PROJACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PROJ
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.MAP_TBL
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPHONE
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VCONA
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VDEPT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VHDEPT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VDSPTXT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VEMP
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VEMPPROJACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VOPTVAL
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPROJACT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPROJ
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VEMPLP
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VDEPMG1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VEMPDPT1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VASTRDE1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VASTRDE2
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPROJRE1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPSTRDE1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VPSTRDE2
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VFORPLA
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VSTAFAC1
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.VSTAFAC2
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PRODUCT
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.INVENTORY
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.CUSTOMER
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PURCHASEORDER
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.CATALOG
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.SUPPLIERS
        TO ${IVPGRLST};
  GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE DSN81210.PRODUCTSUPPLIER
        TO ${IVPGRLST};
//*
//*
//*
//*        STEP  7: ASSEMBLE AND LINKEDIT EDIT EXIT
//*
//PH01S07 EXEC ASMCL,MEM=DSN8EAE1,COND=(4,LT),
//         PARM.LKED='LIST,XREF,NCAL,RENT,AMODE=31,RMODE=ANY'
//*
//*        STEP  8: ASSEMBLE AND LINKEDIT EDIT EXIT
//*
//PH01S08 EXEC ASMCL,MEM=DSN8HUFF,COND=(4,LT),
//         PARM.LKED='LIST,XREF,NCAL,RENT,AMODE=31,RMODE=ANY'
//*
//*        STEP  9: ASSEMBLE AND LINKEDIT FIELD PROCEDURE
//*
//PH01S09 EXEC ASMCL,MEM=DSN8FPRC,COND=(4,LT),
//         PARM.ASM='RENT,OBJECT,NODECK,SYSPARM(FLDPROC)',
//         PARM.LKED='LIST,XREF,NCAL,RENT,AMODE=31,RMODE=ANY'
//*
//*        STEP 10: PRECOMPILE, ASSEMBLE AND LINKEDIT THE
//*                 CALL ATTACH ASSEMBLER INTERFACE
//*
//PH01S10 EXEC DSNHASM,MEM=DSN8CA,
//         COND=(4,LT),
//         PARM.PC='HOST(ASM),DECP(${DSNHDECP}),STDSQL(NO)',
//         PARM.ASM='RENT,OBJECT,NODECK',
//         PARM.LKED='RENT,XREF,AMODE=31,RMODE=ANY'
//PC.DBRMLIB   DD DISP=SHR,
//         DSN=${DBRMLIB}(DSN8CA)
//PC.SYSLIB    DD DSN=${DSNSAMP},
//             DISP=SHR
//PC.SYSIN     DD DISP=SHR,
//         DSN=${DSNSAMP}(DSN8CA)
//ASM.SYSLIB   DD
//             DD DSN=${DSNSAMP},
//             DISP=SHR
//LKED.SYSLMOD DD DISP=SHR,
//         DSN=${RUNLIB}(DSN8CA)
//LKED.SYSIN   DD *
  INCLUDE SYSLIB(DSNALI)
//*
//*        STEP 11: CREATE SAMPLE UTILITY LIST
//*
//PH01S11 EXEC PGM=IEBGENER,COND=(4,LT)
//SYSIN    DD  DUMMY
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *

  LISTDEF DSN8LDEF
          INCLUDE TABLESPACES DATABASE DSN8D12A
          EXCLUDE TABLESPACE           DSN8D12A.DSN8S12R
          EXCLUDE TABLESPACE           DSN8D12A.DSN8S12S

//SYSUT2   DD  DSN=${INSDSPRE}.DSN8.LISTDEF,
//             DISP=(,CATLG,DELETE),
#if (${VOLSDEVT}!="")
//             UNIT=${VOLSDEVT},
#end
#if (${DATACLS2}!="")
//             DATACLAS=${DATACLS2},
#end
#if (${MGMTCLS2}!="")
//             MGMTCLAS=${MGMTCLS2},
#end
#if (${STORCLS2}!="")
//             STORCLAS=${STORCLS2},
#end
#if (${VOLSDAT2}!="")
//             VOL=SER=${VOLSDAT2},
#end
//             SPACE=(TRK,1),
//             DCB=(RECFM=FB,LRECL=80)
//*
//*        STEP 12: LOAD DATA INTO SAMPLE PROGRAM TABLES
//*
//PH01S12 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSRECDT DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LDT)
//SYSRECOV DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LOV)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSIN    DD  *

  LOAD DATA INDDN(SYSRECOV) CONTINUEIF(72:72)='X'
       INTO TABLE DSN81210.TOPTVAL
            (MAJSYS   POSITION(  2) CHAR(1),
             ACTION   POSITION(  4) CHAR(1),
             OBJFLD   POSITION(  6) CHAR(2),
             SRCHCRIT POSITION(  9) CHAR(2),
             SCRTYPE  POSITION( 12) CHAR(1),
             HEADTXT  POSITION( 80) CHAR(50),
             SELTXT   POSITION(159) CHAR(50),
             INFOTXT  POSITION(238) CHAR(71),
             HELPTXT  POSITION(317) CHAR(71),
             PFKTXT   POSITION(396) CHAR(71),
             DSPINDEX POSITION(475) CHAR(2))
       #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECDT) CONTINUEIF(72:72)='X' RESUME(YES)
       INTO TABLE DSN81210.TDSPTXT
            (DSPINDEX POSITION( 2) CHAR(2),
             LINENO   POSITION( 6) CHAR(2),
             DSPLINE  POSITION(80) CHAR(71))
       #getDev("${TVOLDEVT}") SORTNUM 4

//*
//*        STEP 13: LOAD DATA INTO SAMPLE APPLICATION TABLES
//*
//PH01S13 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSRECAC DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LAC)
//SYSRECDP DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LDP)
//SYSRECEM DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LEM)
//SYSRECEP DD  DISP=SHR,
#if (${DECPOINT} == "COMMA")
//         DSN=${DSNSAMP}(DSN8LEPC)
#else
//         DSN=${DSNSAMP}(DSN8LEP)
#end
//SYSRECPA DD  DISP=SHR,
#if (${DECPOINT} == "COMMA")
//         DSN=${DSNSAMP}(DSN8LPAC)
#else
//         DSN=${DSNSAMP}(DSN8LPA)
#end
//SYSRECPJ DD  DISP=SHR,
#if (${DECPOINT} == "COMMA")
//         DSN=${DSNSAMP}(DSN8LPJC)
#else
//         DSN=${DSNSAMP}(DSN8LPJ)
#end
//SYSRECXP DD  DISP=SHR,
//         DSN=${DSNIVPD}(DSN8LXPR)
//SYSERR   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSDISC  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSMAP   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  LOAD DATA INDDN(SYSRECDP)
       INTO TABLE DSN81210.DEPT
            (DEPTNO   POSITION( 1) CHAR(3),
             DEPTNAME POSITION( 5) VARCHAR,
             MGRNO    POSITION(37) CHAR(6) NULLIF(MGRNO='      '),
             ADMRDEPT POSITION(44) CHAR(3),
             LOCATION POSITION(48) CHAR(16))
       ENFORCE NO
       #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECEM) CONTINUEIF(72:72)='X'
       INTO TABLE DSN81210.EMP
           (EMPNO     POSITION( 1)  CHAR(6),
            FIRSTNME  POSITION( 8)  VARCHAR,
            MIDINIT   POSITION(21)  CHAR(1),
            LASTNAME  POSITION(23)  VARCHAR,
            WORKDEPT  POSITION(36)  CHAR(3),
            PHONENO   POSITION(40)  CHAR(4),
            HIREDATE  POSITION(45)  DATE EXTERNAL,
            JOB       POSITION(56)  CHAR(8),
            EDLEVEL   POSITION(65)  INTEGER EXTERNAL(2),
            SEX       POSITION(68)  CHAR(1),
            BIRTHDATE POSITION(80)  DATE EXTERNAL,
            SALARY    POSITION(91)  INTEGER EXTERNAL(5),
            BONUS     POSITION(97)  INTEGER EXTERNAL(5),
            COMM      POSITION(103) INTEGER EXTERNAL(5))
      ENFORCE CONSTRAINTS MAPDDN SYSMAP
      #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECPJ) RESUME YES CONTINUEIF(72:72)='X'
       INTO TABLE DSN81210.PROJ
           (PROJNO   POSITION( 1) CHAR(6),
            PROJNAME POSITION( 8) VARCHAR,
            DEPTNO   POSITION(33) CHAR(3),
            RESPEMP  POSITION(37) CHAR(6),
            PRSTAFF  POSITION(44) DECIMAL EXTERNAL(5),
            PRSTDATE POSITION(50) DATE EXTERNAL,
            PRENDATE POSITION(61) DATE EXTERNAL,
            MAJPROJ  POSITION(80) CHAR(6) NULLIF(MAJPROJ='      '))
      ENFORCE NO
      #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECAC) RESUME YES
       INTO TABLE DSN81210.ACT
           (ACTNO    POSITION( 1) INTEGER EXTERNAL(3),
            ACTKWD   POSITION( 5) CHAR(6),
            ACTDESC  POSITION(13) VARCHAR)
      ENFORCE NO
      #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECPA) RESUME YES
       INTO TABLE DSN81210.PROJACT
           (PROJNO   POSITION( 1) CHAR(6),
            ACTNO    POSITION( 8) INTEGER EXTERNAL(3),
            ACSTAFF  POSITION(12) DECIMAL EXTERNAL(5),
            ACSTDATE POSITION(18) DATE EXTERNAL,
            ACENDATE POSITION(29) DATE EXTERNAL)
      ENFORCE NO
      #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECEP) RESUME YES
       INTO TABLE DSN81210.EMPPROJACT
           (EMPNO    POSITION( 1) CHAR(6),
            PROJNO   POSITION( 8) CHAR(6),
            ACTNO    POSITION(16) INTEGER EXTERNAL(3),
            EMPTIME  POSITION(20) DECIMAL EXTERNAL(5),
            EMSTDATE POSITION(26) DATE EXTERNAL,
            EMENDATE POSITION(37) DATE EXTERNAL)
      ENFORCE NO
      #getDev("${TVOLDEVT}") SORTNUM 4

  LOAD DATA INDDN(SYSRECXP) RESUME YES
       INTO TABLE DSN81210.PRODUCT
           (PID         POSITION(1)   CHAR(10),
           ,NAME        POSITION(11)  VARCHAR           NULLIF(140)='?'
           ,PRICE       POSITION(141) DECIMAL           NULLIF(157)='?'
           ,PROMOPRICE  POSITION(158) DECIMAL           NULLIF(174)='?'
           ,PROMOSTART  POSITION(175) DATE EXTERNAL(10) NULLIF(185)='?'
           ,PROMOEND    POSITION(186) DATE EXTERNAL(10) NULLIF(196)='?'
           ,DESCRIPTION POSITION(197) XML)
       #getDevCcsid(${DEFCCSID})${B}
//*
//*        STEP 14: CHECK DATA FOR REFERENTIAL INTEGRITY
//*
//PH01S14 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSERR   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  CHECK DATA TABLESPACE DSN8D12A.DSN8S12D
             TABLESPACE DSN8D12A.DSN8S12E
             TABLESPACE DSN8D12A.DSN8S12P
       SCOPE ALL
       DELETE YES
       FOR EXCEPTION IN DSN81210.DEPT       USE DSN81210.EDEPT
                     IN DSN81210.EMP        USE DSN81210.EEMP
                     IN DSN81210.PROJ       USE DSN81210.EPROJ
                     IN DSN81210.ACT        USE DSN81210.EACT
                     IN DSN81210.PROJACT    USE DSN81210.EPROJACT
                     IN DSN81210.EMPPROJACT USE DSN81210.EEPA
       EXCEPTIONS 50
       #getDev("${TVOLDEVT}") SORTNUM 4

//*
//*        STEP 15: ESTABLISH A QUIESCE POINT
//*           NOTE: CONDITION CODE 4 INDICATES AN IMAGE COPY
//*                 CANNOT BE TAKEN
//*
//PH01S15 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSLISTD DD  DISP=SHR,DSN=${INSDSPRE}.DSN8.LISTDEF
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  QUIESCE LIST DSN8LDEF

//*
//*        STEP 16: TAKE IMAGE COPY OF SAMPLE TABLES
//*
//PH01S16 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSLISTD DD  DISP=SHR,DSN=${INSDSPRE}.DSN8.LISTDEF
//         DD  *
  INCLUDE TABLESPACE DSN8D12P.DSN8S12C
//DSNTRACE DD  SYSOUT=*
//SYSIN    DD  *

  TEMPLATE DSN8TPLT
           DSN(${INSICPRE}.SYSCOPY.&DB..&TS.)
           DISP (NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 5 NBRSECND 10
      COPY LIST DSN8LDEF
           COPYDDN(DSN8TPLT)

//*
//*        STEP 17: ESTABLISH A QUIESCE POINT USING ONLY IMAGE COPIES
//*
//PH01S17 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSLISTD DD  DISP=SHR,DSN=${INSDSPRE}.DSN8.LISTDEF
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  QUIESCE LIST DSN8LDEF

//*
//*        STEP 18: REORGANIZE TABLESPACES, PRODUCE STATISTICS
//*
//PH01S18 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSLISTD DD  DISP=SHR,DSN=${INSDSPRE}.DSN8.LISTDEF
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSREC   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(200,200),,,ROUND)
//SYSIN    DD  *

  REORG TABLESPACE DSN8D12A.DSN8S12D
        #getDev("${TVOLDEVT}") SORTNUM 4

 RUNSTATS TABLESPACE LIST DSN8LDEF
         INDEX(ALL)

//*
//*        STEP 19: RUN ONLINE REORG OF TBLSPACE USING SHRLEVEL CHANGE
//*
//PH01S19 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSREC   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(200,200),,,ROUND)
//COPYDDN  DD  DSN=${INSICPRE}.COPYDDN.DSN8D12P.DSN8S12C,
//             DISP=(NEW,CATLG),
#if (${VOLSDEVT}!="")
//             UNIT=${VOLSDEVT},
#end
#if (${DATACLS2}!="")
//             DATACLAS=${DATACLS2},
#end
#if (${MGMTCLS2}!="")
//             MGMTCLAS=${MGMTCLS2},
#end
#if (${STORCLS2}!="")
//             STORCLAS=${STORCLS2},
#end
#if (${VOLSDAT2}!="")
//             VOL=SER=${VOLSDAT2},
#end
//             SPACE=(TRK,(10,1),RLSE),
//             DCB=BLKSIZE=8000
//SYSIN    DD  *

 REORG TABLESPACE DSN8D12P.DSN8S12C
    COPYDDN(COPYDDN)
    SHRLEVEL CHANGE
    DEADLINE NONE
    MAPPINGTABLE DSN81210.MAP_TBL
    MAXRO 240 LONGLOG DRAIN DELAY 900
    #getDev("${TVOLDEVT}") SORTNUM 4

  RUNSTATS TABLESPACE DSN8D12P.DSN8S12C
          INDEX(ALL)

//*
//*        STEP 20: LOAD DATA INTO PART 3 OF DSN8D12A.DSN8S12E
//*
//PH01S20 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSRECE3 DD  DISP=SHR,
//         DSN=${DSNSAMP}(DSN8LE3)
//SYSERR   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSDISC  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSMAP   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  LOAD DATA INDDN(SYSRECE3) CONTINUEIF(72:72)='X'
       RESUME YES
       INTO TABLE DSN81210.EMP
            PART 3
            REPLACE
           (EMPNO     POSITION( 1)  CHAR(6),
            FIRSTNME  POSITION( 8)  VARCHAR,
            MIDINIT   POSITION(21)  CHAR(1),
            LASTNAME  POSITION(23)  VARCHAR,
            WORKDEPT  POSITION(36)  CHAR(3),
            PHONENO   POSITION(40)  CHAR(4),
            HIREDATE  POSITION(45)  DATE EXTERNAL,
            JOB       POSITION(56)  CHAR(8),
            EDLEVEL   POSITION(65)  INTEGER EXTERNAL(2),
            SEX       POSITION(68)  CHAR(1),
            BIRTHDATE POSITION(80)  DATE EXTERNAL,
            SALARY    POSITION(91)  INTEGER EXTERNAL(5),
            BONUS     POSITION(97)  INTEGER EXTERNAL(5),
            COMM      POSITION(103) INTEGER EXTERNAL(5))
      ENFORCE CONSTRAINTS MAPDDN SYSMAP
      #getDev("${TVOLDEVT}") SORTNUM 4

//*
//*        STEP 21: SET CURRENT RULES THEN ALTER TABLE
//*
//PH01S21 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';
  SET CURRENT RULES = 'DB2';
  COMMIT;
  ALTER TABLE EMP ADD CONSTRAINT PERSON
    CHECK (SEX = 'M' OR SEX = 'F');
  COMMIT;

//*
//*        STEP 22: CHECK DATA IN PART 3 OF DSN8D12A.DSN8S12E
//*                 FOR REFERENTIAL INTEGRITY
//*
//PH01S22 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSERR   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSDISC  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  CHECK DATA TABLESPACE DSN8D12A.DSN8S12D
             TABLESPACE DSN8D12A.DSN8S12E
             TABLESPACE DSN8D12A.DSN8S12P
       SCOPE ALL
       DELETE YES
       FOR EXCEPTION IN DSN81210.DEPT       USE DSN81210.EDEPT
                     IN DSN81210.EMP        USE DSN81210.EEMP
                     IN DSN81210.PROJ       USE DSN81210.EPROJ
                     IN DSN81210.ACT        USE DSN81210.EACT
                     IN DSN81210.PROJACT    USE DSN81210.EPROJACT
                     IN DSN81210.EMPPROJACT USE DSN81210.EEPA
       EXCEPTIONS 50
       #getDev("${TVOLDEVT}") SORTNUM 4

//*
//*        STEP 23: ATTEMPT INSERT INTO THE EMP TABLE
//*
//PH01S23 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) PARM('RC0') -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';

  INSERT INTO EMP
    VALUES ('000011', 'CHRISTINE', 'I', 'HAAS', 'A00', 'A1A1',
            '1965-01-01', 'PRES', 18, 'F', '1933-08-14',
            52750, 1000, 4220);
  COMMIT;

  INSERT INTO EMP
    VALUES ('200011', 'DIANE', 'J', 'HEMMINGER', 'A00', '3978',
            '1965-01-01', 'SALESREP', 18, 'U', '1933-08-14',
            46500, 1000, 4220);
  COMMIT;

//*
//*        STEP 24: ESTABLISH A QUIESCE POINT FOR PART 3
//*                 OF DSN8D12A.DSN8S12E
//*           NOTE: CONDITION CODE 4 INDICATES AN IMAGE COPY
//*                 CANNOT BE TAKEN
//*
//PH01S24 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  QUIESCE TABLESPACE DSN8D12A.DSN8S12E
          PART 3

//*
//*        STEP 25: TAKE IMAGE COPY OF PART 3 OF DSN8D12A.DSN8S12E
//*
//PH01S25 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//DSNTRACE DD  SYSOUT=*
//SYSCOPY  DD  DSN=${INSICPRE}.DSN8D12A.DSN8S12E.PART3,
//             DISP=(NEW,CATLG),
#if (${VOLSDEVT}!="")
//             UNIT=${VOLSDEVT},
#end
#if (${DATACLS2}!="")
//             DATACLAS=${DATACLS2},
#end
#if (${MGMTCLS2}!="")
//             MGMTCLAS=${MGMTCLS2},
#end
#if (${STORCLS2}!="")
//             STORCLAS=${STORCLS2},
#end
#if (${VOLSDAT2}!="")
//             VOL=SER=${VOLSDAT2},
#end
//             SPACE=(4000,(20,20))
//SYSIN    DD  *

  COPY TABLESPACE DSN8D12A.DSN8S12E
       DSNUM 3 COPYDDN SYSCOPY

//*
//*        STEP 26: ESTABLISH A QUIESCE POINT FOR PART 3
//*                 OF DSN8D12A.DSN8S12E USING ONLY IMAGE COPY
//*           NOTE: CONDITION CODE 4 INDICATES AN IMAGE COPY
//*                 CANNOT BE TAKEN
//*
//PH01S26 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//SYSIN    DD  *

  QUIESCE TABLESPACE DSN8D12A.DSN8S12E
          PART 3

//*
//*        STEP 27: PRODUCE STATISTICS FOR PART 3 OF
//*                 OF DSN8D12A.DSN8S12E
//*
//PH01S27 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSREC   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(200,200),,,ROUND)
//SYSIN    DD  *

  RUNSTATS TABLESPACE DSN8D12A.DSN8S12E
          PART 3
          INDEX(ALL)

//*
//*        STEP 28: UNLOAD PARTITIONS 1,3, AND 4
//*                 OF DSN8D12A.DSN8S12E
//*
//PH01S28 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *

   LISTDEF DSN8LDUL
           INCLUDE TABLESPACE DSN8D12A.DSN8S12E PARTLEVEL
           EXCLUDE TABLESPACE DSN8D12A.DSN8S12E PARTLEVEL(2)
  TEMPLATE DSN8TPPU
           DSN(${INSDSPRE}.&DB..&TS..SYSPUNCH)
           DISP(NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 1 NBRSECND 1
  TEMPLATE DSN8TPSY
           DSN(${INSDSPRE}.&DB..&TS..P&PART.)
           DISP(NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 5 NBRSECND 10
    UNLOAD LIST DSN8LDUL
           PUNCHDDN(DSN8TPPU)
           UNLDDN(DSN8TPSY)
           EBCDIC
           NOPAD

//*
//*        STEP 29: REDUCE THE PARTITIONING KEY ON PARTITION 4 OF
//*                 TABLESPACE DSN8S12E
//*
//PH01S29 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
  SET CURRENT SQLID = '${IVPSQLID}';

   ALTER TABLE DSN81210.EMP ALTER PART 4 VALUES('499999');

//*
//*        STEP 30: REORGANIZE TABLESPACE DSN8D12A.DSN8S12E
//*
//PH01S30 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SYSLISTD DD  DISP=SHR,DSN=${INSDSPRE}.DSN8.LISTDEF
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSREC   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(200,200),,,ROUND)
//SYSIN    DD  *

  TEMPLATE DSN8TPPU
           DSN(${INSDSPRE}.&DB..&TS..REORGPUN)
           DISP(NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 1 NBRSECND 1
  TEMPLATE DSN8TPCY
           DSN(${INSICPRE}.&DB..&TS..REORGCPY)
           DISP(NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 1 NBRSECND 1
  TEMPLATE DSN8TPDS
           DSN(${INSDSPRE}.&DB..&TS..REORGDSC)
           DISP(NEW,CATLG,DELETE)
#if (${VOLSDEVT}!="")
           UNIT ${VOLSDEVT}
#end
#if (${DATACLS2}!="")
           DATACLAS ${DATACLS2}
#end
#if (${MGMTCLS2}!="")
           MGMTCLAS ${MGMTCLS2}
#end
#if (${STORCLS2}!="")
           STORCLAS ${STORCLS2}
#end
#if (${VOLSDAT2}!="")
           VOLUMES(${VOLSDAT2})
#end
           PCTPRIME 100 MAXPRIME 1 NBRSECND 1
     REORG TABLESPACE DSN8D12A.DSN8S12E
           SHRLEVEL REFERENCE
           PART 1:4
           PUNCHDDN(DSN8TPPU)
           COPYDDN(DSN8TPCY)
           DISCARDDN(DSN8TPDS)
           #getDev("${TVOLDEVT}") SORTNUM 4

//*
//*        STEP 31: ADD A FIFTH PARTITION TO
//*                 TABLESPACE DSN8S12E
//*
//PH01S31 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  -STOP DB(DSN8D12A) SPACENAM(*)
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
  -START DB(DSN8D12A) SPACENAM(*)
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
   SET CURRENT SQLID = '${IVPSQLID}';

   ALTER TABLE DSN81210.EMP ADD PARTITION ENDING AT('999999');

//*
//*        STEP 32: EXTEND THE LENGTH OF A FIXED CHAR
//*                 COLUMN IN THE PARTS TABLE. ALSO
//*                 CONVERT A SMALL INTEGER FIELD TO
//*                 A DECIMAL TYPE FIELD OF EEMP TABLE.
//*
//PH01S32 EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(4,LT)
//SYSTSPRT DD  SYSOUT=*
//SYSTSIN  DD  *
  DSN SYSTEM(${GRPATTNM})
  RUN  PROGRAM(DSNTIAD) PLAN(DSNTIA12) -
       LIB('${RUNLIB}')
//SYSPRINT DD  SYSOUT=*
//SYSUDUMP DD  SYSOUT=*
//SYSIN    DD  *
   SET CURRENT SQLID = '${IVPSQLID}';

   ALTER TABLE DSN81210.PARTS ALTER COLUMN ITEMNUM
         SET DATA TYPE VARCHAR(10);

   ALTER TABLE DSN81210.EEMP ALTER COLUMN EDLEVEL
         SET DATA TYPE DECIMAL(5, 0);

//*
//*        STEP 33: REORGANIZE TABLESPACE DSN8D12A.DSN8S12R AND
//*                 DSN8D12A.DSN8S12S TO RESET REORG-PENDING STATUS
//*
//PH01S33 EXEC DSNUPROC,PARM='${MVSSNAME},DSNTEX',COND=(4,LT)
//SORTLIB  DD  DSN=${SORTLIB},DISP=SHR
//SORTOUT  DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(20,20),,,ROUND)
//DSNTRACE DD  SYSOUT=*
//SYSUT1   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(50,50),,,ROUND)
//SYSREC   DD  #unit("${TVOLDEVT}",",")SPACE=(4000,(200,200),,,ROUND)
//SYSIN    DD  *

  REORG TABLESPACE DSN8D12A.DSN8S12R
        #getDev("${TVOLDEVT}")  SORTNUM 4

  REORG TABLESPACE DSN8D12A.DSN8S12S
        #getDev("${TVOLDEVT}")  SORTNUM 4

//*
## Macro to get the plan name given the default CCSID.
## $defccsid is the default CCSID.
#macro(getPlan $defccsid)
#set ($plania37 = "PLAN(DSNTIA37)")
#set ($plania12 = "PLAN(DSNTIA12)")
#if(($defccsid==930 || $defccsid==1390 || $defccsid==5026))
${plania37}#else${plania12}#end#end
## Macro to get the sort device CCSID attribute.
## $defccsid is the default CCSID.
#macro(getDevCcsid $defccsid)
#set ($sortdev1 = "SORTDEVT SYSDA SORTNUM 4")
#set ($sortdev2 = "$sortdev1 CCSID(37,65534,65534)")
#set ($planiab1 = "PLAN(DSNTIAB1)")
#if(($defccsid==930 || $defccsid==1390 || $defccsid==5026))
${sortdev2}#else${sortdev1}#end#end
## Macro to get the sort device type.
## $devtype is the sort device type.
#macro(getDev $devtype)
#if(($devtype!=""))
SORTDEVT $devtype#{else}SORTDEVT SYSDA#end#end
## Macro to get the UNIT parameter of a DD statement.
## $device is the device type.
## $pad is the string to be padded on the right.
#macro(unit $devtype $pad)
#if($devtype != "")UNIT=${devtype}${pad}#{else}#{end}
#end
## Macro to get the SQL string delimiter.
## $defsqstr is the SQLDELI DECP value.
#macro(dlm $defsqstr)
#if($defsqstr == "QUOTE")"${B}#{else}'${B}#{end}
#end
## Macro to append suffix for data sets
## $suffix is the data set suffix
## return the suffix with the right period
#macro (libs $suffix)
#if ($suffix !=  "")
.$suffix#else#end#end
